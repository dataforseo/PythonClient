# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from dataforseo_client.models.on_page_resource_location_info import OnPageResourceLocationInfo
from typing import Optional, Set
from typing_extensions import Self

class WaterfallResourceInfo(BaseModel):
    """
    WaterfallResourceInfo
    """ # noqa: E501
    resource_type: Optional[StrictStr] = None
    url: Optional[StrictStr] = Field(default=None, description="resource URL")
    initiator: Optional[StrictStr] = Field(default=None, description="resource initiator")
    duration_time: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="total time it takes until a browser receives a complete response from a server (in milliseconds)")
    fetch_start: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="time to start downloading the resource the amount of time the browser needs to start downloading a resource")
    fetch_end: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="time to complete downloading the resource the amount of time the browser needs to complete downloading a resource")
    location: Optional[OnPageResourceLocationInfo] = None
    is_render_blocking: Optional[StrictBool] = Field(default=None, description="indicates whether the resource blocks rendering")
    __properties: ClassVar[List[str]] = ["resource_type", "url", "initiator", "duration_time", "fetch_start", "fetch_end", "location", "is_render_blocking"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WaterfallResourceInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of location
        if self.location:
            _dict['location'] = self.location.to_dict()
        # set to None if resource_type (nullable) is None
        # and model_fields_set contains the field
        if self.resource_type is None and "resource_type" in self.model_fields_set:
            _dict['resource_type'] = None

        # set to None if url (nullable) is None
        # and model_fields_set contains the field
        if self.url is None and "url" in self.model_fields_set:
            _dict['url'] = None

        # set to None if initiator (nullable) is None
        # and model_fields_set contains the field
        if self.initiator is None and "initiator" in self.model_fields_set:
            _dict['initiator'] = None

        # set to None if duration_time (nullable) is None
        # and model_fields_set contains the field
        if self.duration_time is None and "duration_time" in self.model_fields_set:
            _dict['duration_time'] = None

        # set to None if fetch_start (nullable) is None
        # and model_fields_set contains the field
        if self.fetch_start is None and "fetch_start" in self.model_fields_set:
            _dict['fetch_start'] = None

        # set to None if fetch_end (nullable) is None
        # and model_fields_set contains the field
        if self.fetch_end is None and "fetch_end" in self.model_fields_set:
            _dict['fetch_end'] = None

        # set to None if is_render_blocking (nullable) is None
        # and model_fields_set contains the field
        if self.is_render_blocking is None and "is_render_blocking" in self.model_fields_set:
            _dict['is_render_blocking'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WaterfallResourceInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "resource_type": obj.get("resource_type"),
            "url": obj.get("url"),
            "initiator": obj.get("initiator"),
            "duration_time": obj.get("duration_time"),
            "fetch_start": obj.get("fetch_start"),
            "fetch_end": obj.get("fetch_end"),
            "location": OnPageResourceLocationInfo.from_dict(obj["location"]) if obj.get("location") is not None else None,
            "is_render_blocking": obj.get("is_render_blocking")
        })
        return _obj


