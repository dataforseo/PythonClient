# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing import Optional, Set
from typing_extensions import Self

class TopicListDataItemInfo(BaseModel):
    """
    TopicListDataItemInfo
    """ # noqa: E501
    topic_id: Optional[StrictStr] = Field(default=None, description="unique topic identifier in Google Trends")
    topic_title: Optional[StrictStr] = Field(default=None, description="title of the topic")
    topic_type: Optional[StrictStr] = Field(default=None, description="type of the topic represents the general type of the topic")
    value: Optional[StrictStr] = Field(default=None, description="search term popularity represents the popularity of the topic. Scoring is on a relative scale where a value of 100 is the most commonly searched topic and a value of 50 is a topic searched half as often as the most popular term, and so on.")
    __properties: ClassVar[List[str]] = ["topic_id", "topic_title", "topic_type", "value"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of TopicListDataItemInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if topic_id (nullable) is None
        # and model_fields_set contains the field
        if self.topic_id is None and "topic_id" in self.model_fields_set:
            _dict['topic_id'] = None

        # set to None if topic_title (nullable) is None
        # and model_fields_set contains the field
        if self.topic_title is None and "topic_title" in self.model_fields_set:
            _dict['topic_title'] = None

        # set to None if topic_type (nullable) is None
        # and model_fields_set contains the field
        if self.topic_type is None and "topic_type" in self.model_fields_set:
            _dict['topic_type'] = None

        # set to None if value (nullable) is None
        # and model_fields_set contains the field
        if self.value is None and "value" in self.model_fields_set:
            _dict['value'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of TopicListDataItemInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "topic_id": obj.get("topic_id"),
            "topic_title": obj.get("topic_title"),
            "topic_type": obj.get("topic_type"),
            "value": obj.get("value")
        })
        return _obj


