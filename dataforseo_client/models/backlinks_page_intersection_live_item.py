# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from dataforseo_client.models.backlinks_page_intersection_info import BacklinksPageIntersectionInfo
from dataforseo_client.models.intersection_summary_info import IntersectionSummaryInfo
from typing import Optional, Set
from typing_extensions import Self

class BacklinksPageIntersectionLiveItem(BaseModel):
    """
    BacklinksPageIntersectionLiveItem
    """ # noqa: E501
    page_intersection: Optional[Dict[str, List[BacklinksPageIntersectionInfo]]] = Field(default=None, description="contains data on pages that link to the corresponding targets specified in the POST array data is provided in separate objects corresponding to pages specified in the targets object")
    summary: Optional[IntersectionSummaryInfo] = None
    __properties: ClassVar[List[str]] = ["page_intersection", "summary"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BacklinksPageIntersectionLiveItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in page_intersection (dict of array)
        _field_dict_of_array = {}
        if self.page_intersection:
            for _key_page_intersection in self.page_intersection:
                if self.page_intersection[_key_page_intersection] is not None:
                    _field_dict_of_array[_key_page_intersection] = [
                        _item.to_dict() for _item in self.page_intersection[_key_page_intersection]
                    ]
            _dict['page_intersection'] = _field_dict_of_array
        # override the default output from pydantic by calling `to_dict()` of summary
        if self.summary:
            _dict['summary'] = self.summary.to_dict()
        # set to None if page_intersection (nullable) is None
        # and model_fields_set contains the field
        if self.page_intersection is None and "page_intersection" in self.model_fields_set:
            _dict['page_intersection'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BacklinksPageIntersectionLiveItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "page_intersection": dict(
                (_k,
                        [BacklinksPageIntersectionInfo.from_dict(_item) for _item in _v]
                        if _v is not None
                        else None
                )
                for _k, _v in obj.get("page_intersection", {}).items()
            ),
            "summary": IntersectionSummaryInfo.from_dict(obj["summary"]) if obj.get("summary") is not None else None
        })
        return _obj


