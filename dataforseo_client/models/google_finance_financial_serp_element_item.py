# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from dataforseo_client.models.base_google_finance_serp_element_item import BaseGoogleFinanceSerpElementItem
from dataforseo_client.models.metrics_info import MetricsInfo
from typing import Optional, Set
from typing_extensions import Self

class GoogleFinanceFinancialSerpElementItem(BaseGoogleFinanceSerpElementItem):
    """
    GoogleFinanceFinancialSerpElementItem
    """ # noqa: E501
    rank_group: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="group rank in SERP position within a group of elements with identical type values positions of elements with different type values are omitted from rank_group")
    rank_absolute: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="absolute rank in SERP absolute position among all the elements in SERP")
    quarterly_metrics: Optional[List[MetricsInfo]] = Field(default=None, description="quarterly google finance metrics")
    annual_metrics: Optional[List[MetricsInfo]] = Field(default=None, description="annual google finance metrics")
    __properties: ClassVar[List[str]] = ["type", "rank_group", "rank_absolute", "quarterly_metrics", "annual_metrics"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GoogleFinanceFinancialSerpElementItem from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in quarterly_metrics (list)
        _items = []
        if self.quarterly_metrics:
            for _item_quarterly_metrics in self.quarterly_metrics:
                if _item_quarterly_metrics:
                    _items.append(_item_quarterly_metrics.to_dict())
            _dict['quarterly_metrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in annual_metrics (list)
        _items = []
        if self.annual_metrics:
            for _item_annual_metrics in self.annual_metrics:
                if _item_annual_metrics:
                    _items.append(_item_annual_metrics.to_dict())
            _dict['annual_metrics'] = _items
        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if rank_group (nullable) is None
        # and model_fields_set contains the field
        if self.rank_group is None and "rank_group" in self.model_fields_set:
            _dict['rank_group'] = None

        # set to None if rank_absolute (nullable) is None
        # and model_fields_set contains the field
        if self.rank_absolute is None and "rank_absolute" in self.model_fields_set:
            _dict['rank_absolute'] = None

        # set to None if quarterly_metrics (nullable) is None
        # and model_fields_set contains the field
        if self.quarterly_metrics is None and "quarterly_metrics" in self.model_fields_set:
            _dict['quarterly_metrics'] = None

        # set to None if annual_metrics (nullable) is None
        # and model_fields_set contains the field
        if self.annual_metrics is None and "annual_metrics" in self.model_fields_set:
            _dict['annual_metrics'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GoogleFinanceFinancialSerpElementItem from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "rank_group": obj.get("rank_group"),
            "rank_absolute": obj.get("rank_absolute"),
            "quarterly_metrics": [MetricsInfo.from_dict(_item) for _item in obj["quarterly_metrics"]] if obj.get("quarterly_metrics") is not None else None,
            "annual_metrics": [MetricsInfo.from_dict(_item) for _item in obj["annual_metrics"]] if obj.get("annual_metrics") is not None else None
        })
        return _obj


