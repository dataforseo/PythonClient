# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class OrganicMetricsInfo(BaseModel):
    """
    OrganicMetricsInfo
    """ # noqa: E501
    type: Optional[StrictStr] = Field(default=None, description="type of element")
    timestamp: Optional[StrictStr] = Field(default=None, description="date and time of the value readout in the UTC format: “yyyy-mm-dd hh-mm-ss +00:00” example: 2025-02-10 09:40:00 +00:00")
    revenue: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="revenue value")
    revenue_delta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="change in revenue")
    operating_expense: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="operating expense value")
    operating_expense_delta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="change in operating expense")
    net_income: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="net income value")
    net_income_delta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="change in net income")
    net_profit_margin: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="net profit margin value")
    net_profit_margin_delta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="change in net profit margin")
    earnings_per_share: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="earnings per share value")
    earnings_per_share_delta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="change in earnings per share")
    ebitda: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="earnings before interest, taxes, deprecation, amortisation")
    ebitda_delta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="change in ebitda")
    effective_tax_rate: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="effective tax rate value")
    cash_and_short_term_investments: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="cash and short-term investments value")
    cash_and_short_term_investments_delta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="change in cash and short-term investments")
    total_assets: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="total assets value")
    total_assets_delta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="change in total assets")
    total_liabilities: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="total liabilities value")
    total_liabilities_delta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="change in total liabilities")
    total_equity: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="total equity value")
    shares_outstanding: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="outstanding shares value")
    price_to_book: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="price to book")
    return_on_assets: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="return on assets")
    return_on_capital: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="return on capital")
    cash_from_operations: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="cash from operations")
    cash_from_operations_delta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="change in cash from operations")
    cash_from_investing: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="cash from investing")
    cash_from_investing_delta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="change in cash from investing")
    cash_from_financing: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="cash from financing/em>")
    cash_from_financing_delta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="change in cash from financing")
    net_change_in_cash: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="net change in cash")
    net_change_in_cash_delta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="change in net change in cash")
    free_cash_flow: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="free cash flow value")
    free_cash_flow_delta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="change in free cash flow")
    pos_1: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="number of organic SERPs where the domain ranks #1")
    pos_2_3: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="number of organic SERPs where the domain ranks #2-3")
    pos_4_10: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="number of organic SERPs where the domain ranks #4-10")
    pos_11_20: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="number of organic SERPs where the domain ranks #11-20")
    pos_21_30: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="number of organic SERPs where the domain ranks #21-30")
    pos_31_40: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="number of organic SERPs where the domain ranks #31-40")
    pos_41_50: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="number of organic SERPs where the domain ranks #41-50")
    pos_51_60: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="number of organic SERPs where the domain ranks #51-60")
    pos_61_70: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="number of organic SERPs where the domain ranks #61-70")
    pos_71_80: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="number of organic SERPs where the domain ranks #71-80")
    pos_81_90: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="number of organic SERPs where the domain ranks #81-90")
    pos_91_100: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="number of organic SERPs where the domain ranks #91-100")
    etv: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="estimated traffic volume estimated organic monthly traffic to the domain calculated as the product of CTR (click-through-rate) and search volume values of all keywords the domain ranks for learn more about how the metric is calculated in this help center article")
    count: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="total count of organic SERPs that contain the domain")
    estimated_paid_traffic_cost: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="estimated cost of converting organic search traffic into paid represents the estimated monthly cost of running ads (USD) for all keywords a domain ranks for the metric is calculated as the product of organic etv and paid cpc values and indicates the cost of driving the estimated volume of monthly organic traffic through PPC advertising in Google Search learn more about how the metric is calculated in this help center article")
    is_new: Optional[StrictInt] = Field(default=None, description="number of new ranked elements indicates how many new ranked elements were found for this domain")
    is_up: Optional[StrictInt] = Field(default=None, description="rank went up indicates how many ranked elements of this domain went up in Google Search")
    is_down: Optional[StrictInt] = Field(default=None, description="rank went down indicates how many ranked elements of this domain went down in Google Search")
    is_lost: Optional[StrictInt] = Field(default=None, description="lost ranked elements indicates how many ranked elements of this domain were previously presented in SERPs, but weren’t found during the last check")
    __properties: ClassVar[List[str]] = ["type", "timestamp", "revenue", "revenue_delta", "operating_expense", "operating_expense_delta", "net_income", "net_income_delta", "net_profit_margin", "net_profit_margin_delta", "earnings_per_share", "earnings_per_share_delta", "ebitda", "ebitda_delta", "effective_tax_rate", "cash_and_short_term_investments", "cash_and_short_term_investments_delta", "total_assets", "total_assets_delta", "total_liabilities", "total_liabilities_delta", "total_equity", "shares_outstanding", "price_to_book", "return_on_assets", "return_on_capital", "cash_from_operations", "cash_from_operations_delta", "cash_from_investing", "cash_from_investing_delta", "cash_from_financing", "cash_from_financing_delta", "net_change_in_cash", "net_change_in_cash_delta", "free_cash_flow", "free_cash_flow_delta", "pos_1", "pos_2_3", "pos_4_10", "pos_11_20", "pos_21_30", "pos_31_40", "pos_41_50", "pos_51_60", "pos_61_70", "pos_71_80", "pos_81_90", "pos_91_100", "etv", "count", "estimated_paid_traffic_cost", "is_new", "is_up", "is_down", "is_lost"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OrganicMetricsInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if type (nullable) is None
        # and model_fields_set contains the field
        if self.type is None and "type" in self.model_fields_set:
            _dict['type'] = None

        # set to None if timestamp (nullable) is None
        # and model_fields_set contains the field
        if self.timestamp is None and "timestamp" in self.model_fields_set:
            _dict['timestamp'] = None

        # set to None if revenue (nullable) is None
        # and model_fields_set contains the field
        if self.revenue is None and "revenue" in self.model_fields_set:
            _dict['revenue'] = None

        # set to None if revenue_delta (nullable) is None
        # and model_fields_set contains the field
        if self.revenue_delta is None and "revenue_delta" in self.model_fields_set:
            _dict['revenue_delta'] = None

        # set to None if operating_expense (nullable) is None
        # and model_fields_set contains the field
        if self.operating_expense is None and "operating_expense" in self.model_fields_set:
            _dict['operating_expense'] = None

        # set to None if operating_expense_delta (nullable) is None
        # and model_fields_set contains the field
        if self.operating_expense_delta is None and "operating_expense_delta" in self.model_fields_set:
            _dict['operating_expense_delta'] = None

        # set to None if net_income (nullable) is None
        # and model_fields_set contains the field
        if self.net_income is None and "net_income" in self.model_fields_set:
            _dict['net_income'] = None

        # set to None if net_income_delta (nullable) is None
        # and model_fields_set contains the field
        if self.net_income_delta is None and "net_income_delta" in self.model_fields_set:
            _dict['net_income_delta'] = None

        # set to None if net_profit_margin (nullable) is None
        # and model_fields_set contains the field
        if self.net_profit_margin is None and "net_profit_margin" in self.model_fields_set:
            _dict['net_profit_margin'] = None

        # set to None if net_profit_margin_delta (nullable) is None
        # and model_fields_set contains the field
        if self.net_profit_margin_delta is None and "net_profit_margin_delta" in self.model_fields_set:
            _dict['net_profit_margin_delta'] = None

        # set to None if earnings_per_share (nullable) is None
        # and model_fields_set contains the field
        if self.earnings_per_share is None and "earnings_per_share" in self.model_fields_set:
            _dict['earnings_per_share'] = None

        # set to None if earnings_per_share_delta (nullable) is None
        # and model_fields_set contains the field
        if self.earnings_per_share_delta is None and "earnings_per_share_delta" in self.model_fields_set:
            _dict['earnings_per_share_delta'] = None

        # set to None if ebitda (nullable) is None
        # and model_fields_set contains the field
        if self.ebitda is None and "ebitda" in self.model_fields_set:
            _dict['ebitda'] = None

        # set to None if ebitda_delta (nullable) is None
        # and model_fields_set contains the field
        if self.ebitda_delta is None and "ebitda_delta" in self.model_fields_set:
            _dict['ebitda_delta'] = None

        # set to None if effective_tax_rate (nullable) is None
        # and model_fields_set contains the field
        if self.effective_tax_rate is None and "effective_tax_rate" in self.model_fields_set:
            _dict['effective_tax_rate'] = None

        # set to None if cash_and_short_term_investments (nullable) is None
        # and model_fields_set contains the field
        if self.cash_and_short_term_investments is None and "cash_and_short_term_investments" in self.model_fields_set:
            _dict['cash_and_short_term_investments'] = None

        # set to None if cash_and_short_term_investments_delta (nullable) is None
        # and model_fields_set contains the field
        if self.cash_and_short_term_investments_delta is None and "cash_and_short_term_investments_delta" in self.model_fields_set:
            _dict['cash_and_short_term_investments_delta'] = None

        # set to None if total_assets (nullable) is None
        # and model_fields_set contains the field
        if self.total_assets is None and "total_assets" in self.model_fields_set:
            _dict['total_assets'] = None

        # set to None if total_assets_delta (nullable) is None
        # and model_fields_set contains the field
        if self.total_assets_delta is None and "total_assets_delta" in self.model_fields_set:
            _dict['total_assets_delta'] = None

        # set to None if total_liabilities (nullable) is None
        # and model_fields_set contains the field
        if self.total_liabilities is None and "total_liabilities" in self.model_fields_set:
            _dict['total_liabilities'] = None

        # set to None if total_liabilities_delta (nullable) is None
        # and model_fields_set contains the field
        if self.total_liabilities_delta is None and "total_liabilities_delta" in self.model_fields_set:
            _dict['total_liabilities_delta'] = None

        # set to None if total_equity (nullable) is None
        # and model_fields_set contains the field
        if self.total_equity is None and "total_equity" in self.model_fields_set:
            _dict['total_equity'] = None

        # set to None if shares_outstanding (nullable) is None
        # and model_fields_set contains the field
        if self.shares_outstanding is None and "shares_outstanding" in self.model_fields_set:
            _dict['shares_outstanding'] = None

        # set to None if price_to_book (nullable) is None
        # and model_fields_set contains the field
        if self.price_to_book is None and "price_to_book" in self.model_fields_set:
            _dict['price_to_book'] = None

        # set to None if return_on_assets (nullable) is None
        # and model_fields_set contains the field
        if self.return_on_assets is None and "return_on_assets" in self.model_fields_set:
            _dict['return_on_assets'] = None

        # set to None if return_on_capital (nullable) is None
        # and model_fields_set contains the field
        if self.return_on_capital is None and "return_on_capital" in self.model_fields_set:
            _dict['return_on_capital'] = None

        # set to None if cash_from_operations (nullable) is None
        # and model_fields_set contains the field
        if self.cash_from_operations is None and "cash_from_operations" in self.model_fields_set:
            _dict['cash_from_operations'] = None

        # set to None if cash_from_operations_delta (nullable) is None
        # and model_fields_set contains the field
        if self.cash_from_operations_delta is None and "cash_from_operations_delta" in self.model_fields_set:
            _dict['cash_from_operations_delta'] = None

        # set to None if cash_from_investing (nullable) is None
        # and model_fields_set contains the field
        if self.cash_from_investing is None and "cash_from_investing" in self.model_fields_set:
            _dict['cash_from_investing'] = None

        # set to None if cash_from_investing_delta (nullable) is None
        # and model_fields_set contains the field
        if self.cash_from_investing_delta is None and "cash_from_investing_delta" in self.model_fields_set:
            _dict['cash_from_investing_delta'] = None

        # set to None if cash_from_financing (nullable) is None
        # and model_fields_set contains the field
        if self.cash_from_financing is None and "cash_from_financing" in self.model_fields_set:
            _dict['cash_from_financing'] = None

        # set to None if cash_from_financing_delta (nullable) is None
        # and model_fields_set contains the field
        if self.cash_from_financing_delta is None and "cash_from_financing_delta" in self.model_fields_set:
            _dict['cash_from_financing_delta'] = None

        # set to None if net_change_in_cash (nullable) is None
        # and model_fields_set contains the field
        if self.net_change_in_cash is None and "net_change_in_cash" in self.model_fields_set:
            _dict['net_change_in_cash'] = None

        # set to None if net_change_in_cash_delta (nullable) is None
        # and model_fields_set contains the field
        if self.net_change_in_cash_delta is None and "net_change_in_cash_delta" in self.model_fields_set:
            _dict['net_change_in_cash_delta'] = None

        # set to None if free_cash_flow (nullable) is None
        # and model_fields_set contains the field
        if self.free_cash_flow is None and "free_cash_flow" in self.model_fields_set:
            _dict['free_cash_flow'] = None

        # set to None if free_cash_flow_delta (nullable) is None
        # and model_fields_set contains the field
        if self.free_cash_flow_delta is None and "free_cash_flow_delta" in self.model_fields_set:
            _dict['free_cash_flow_delta'] = None

        # set to None if pos_1 (nullable) is None
        # and model_fields_set contains the field
        if self.pos_1 is None and "pos_1" in self.model_fields_set:
            _dict['pos_1'] = None

        # set to None if pos_2_3 (nullable) is None
        # and model_fields_set contains the field
        if self.pos_2_3 is None and "pos_2_3" in self.model_fields_set:
            _dict['pos_2_3'] = None

        # set to None if pos_4_10 (nullable) is None
        # and model_fields_set contains the field
        if self.pos_4_10 is None and "pos_4_10" in self.model_fields_set:
            _dict['pos_4_10'] = None

        # set to None if pos_11_20 (nullable) is None
        # and model_fields_set contains the field
        if self.pos_11_20 is None and "pos_11_20" in self.model_fields_set:
            _dict['pos_11_20'] = None

        # set to None if pos_21_30 (nullable) is None
        # and model_fields_set contains the field
        if self.pos_21_30 is None and "pos_21_30" in self.model_fields_set:
            _dict['pos_21_30'] = None

        # set to None if pos_31_40 (nullable) is None
        # and model_fields_set contains the field
        if self.pos_31_40 is None and "pos_31_40" in self.model_fields_set:
            _dict['pos_31_40'] = None

        # set to None if pos_41_50 (nullable) is None
        # and model_fields_set contains the field
        if self.pos_41_50 is None and "pos_41_50" in self.model_fields_set:
            _dict['pos_41_50'] = None

        # set to None if pos_51_60 (nullable) is None
        # and model_fields_set contains the field
        if self.pos_51_60 is None and "pos_51_60" in self.model_fields_set:
            _dict['pos_51_60'] = None

        # set to None if pos_61_70 (nullable) is None
        # and model_fields_set contains the field
        if self.pos_61_70 is None and "pos_61_70" in self.model_fields_set:
            _dict['pos_61_70'] = None

        # set to None if pos_71_80 (nullable) is None
        # and model_fields_set contains the field
        if self.pos_71_80 is None and "pos_71_80" in self.model_fields_set:
            _dict['pos_71_80'] = None

        # set to None if pos_81_90 (nullable) is None
        # and model_fields_set contains the field
        if self.pos_81_90 is None and "pos_81_90" in self.model_fields_set:
            _dict['pos_81_90'] = None

        # set to None if pos_91_100 (nullable) is None
        # and model_fields_set contains the field
        if self.pos_91_100 is None and "pos_91_100" in self.model_fields_set:
            _dict['pos_91_100'] = None

        # set to None if etv (nullable) is None
        # and model_fields_set contains the field
        if self.etv is None and "etv" in self.model_fields_set:
            _dict['etv'] = None

        # set to None if count (nullable) is None
        # and model_fields_set contains the field
        if self.count is None and "count" in self.model_fields_set:
            _dict['count'] = None

        # set to None if estimated_paid_traffic_cost (nullable) is None
        # and model_fields_set contains the field
        if self.estimated_paid_traffic_cost is None and "estimated_paid_traffic_cost" in self.model_fields_set:
            _dict['estimated_paid_traffic_cost'] = None

        # set to None if is_new (nullable) is None
        # and model_fields_set contains the field
        if self.is_new is None and "is_new" in self.model_fields_set:
            _dict['is_new'] = None

        # set to None if is_up (nullable) is None
        # and model_fields_set contains the field
        if self.is_up is None and "is_up" in self.model_fields_set:
            _dict['is_up'] = None

        # set to None if is_down (nullable) is None
        # and model_fields_set contains the field
        if self.is_down is None and "is_down" in self.model_fields_set:
            _dict['is_down'] = None

        # set to None if is_lost (nullable) is None
        # and model_fields_set contains the field
        if self.is_lost is None and "is_lost" in self.model_fields_set:
            _dict['is_lost'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OrganicMetricsInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "timestamp": obj.get("timestamp"),
            "revenue": obj.get("revenue"),
            "revenue_delta": obj.get("revenue_delta"),
            "operating_expense": obj.get("operating_expense"),
            "operating_expense_delta": obj.get("operating_expense_delta"),
            "net_income": obj.get("net_income"),
            "net_income_delta": obj.get("net_income_delta"),
            "net_profit_margin": obj.get("net_profit_margin"),
            "net_profit_margin_delta": obj.get("net_profit_margin_delta"),
            "earnings_per_share": obj.get("earnings_per_share"),
            "earnings_per_share_delta": obj.get("earnings_per_share_delta"),
            "ebitda": obj.get("ebitda"),
            "ebitda_delta": obj.get("ebitda_delta"),
            "effective_tax_rate": obj.get("effective_tax_rate"),
            "cash_and_short_term_investments": obj.get("cash_and_short_term_investments"),
            "cash_and_short_term_investments_delta": obj.get("cash_and_short_term_investments_delta"),
            "total_assets": obj.get("total_assets"),
            "total_assets_delta": obj.get("total_assets_delta"),
            "total_liabilities": obj.get("total_liabilities"),
            "total_liabilities_delta": obj.get("total_liabilities_delta"),
            "total_equity": obj.get("total_equity"),
            "shares_outstanding": obj.get("shares_outstanding"),
            "price_to_book": obj.get("price_to_book"),
            "return_on_assets": obj.get("return_on_assets"),
            "return_on_capital": obj.get("return_on_capital"),
            "cash_from_operations": obj.get("cash_from_operations"),
            "cash_from_operations_delta": obj.get("cash_from_operations_delta"),
            "cash_from_investing": obj.get("cash_from_investing"),
            "cash_from_investing_delta": obj.get("cash_from_investing_delta"),
            "cash_from_financing": obj.get("cash_from_financing"),
            "cash_from_financing_delta": obj.get("cash_from_financing_delta"),
            "net_change_in_cash": obj.get("net_change_in_cash"),
            "net_change_in_cash_delta": obj.get("net_change_in_cash_delta"),
            "free_cash_flow": obj.get("free_cash_flow"),
            "free_cash_flow_delta": obj.get("free_cash_flow_delta"),
            "pos_1": obj.get("pos_1"),
            "pos_2_3": obj.get("pos_2_3"),
            "pos_4_10": obj.get("pos_4_10"),
            "pos_11_20": obj.get("pos_11_20"),
            "pos_21_30": obj.get("pos_21_30"),
            "pos_31_40": obj.get("pos_31_40"),
            "pos_41_50": obj.get("pos_41_50"),
            "pos_51_60": obj.get("pos_51_60"),
            "pos_61_70": obj.get("pos_61_70"),
            "pos_71_80": obj.get("pos_71_80"),
            "pos_81_90": obj.get("pos_81_90"),
            "pos_91_100": obj.get("pos_91_100"),
            "etv": obj.get("etv"),
            "count": obj.get("count"),
            "estimated_paid_traffic_cost": obj.get("estimated_paid_traffic_cost"),
            "is_new": obj.get("is_new"),
            "is_up": obj.get("is_up"),
            "is_down": obj.get("is_down"),
            "is_lost": obj.get("is_lost")
        })
        return _obj


