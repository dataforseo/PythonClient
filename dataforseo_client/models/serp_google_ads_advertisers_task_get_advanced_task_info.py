from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr, StrictBool
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set, Any, Dict, List
from typing_extensions import Self

from dataforseo_client.models.serp_google_ads_advertisers_task_get_advanced_result_info import SerpGoogleAdsAdvertisersTaskGetAdvancedResultInfo
from dataforseo_client.models.base_response_task_info import BaseResponseTaskInfo



class SerpGoogleAdsAdvertisersTaskGetAdvancedTaskInfo(BaseModel):
    """
    SerpGoogleAdsAdvertisersTaskGetAdvancedTaskInfo
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="task identifier. unique task identifier in our system in the UUID format")
    status_code: Optional[StrictInt] = Field(default=None, description="status code of the task. generated by DataForSEO, can be within the following range: 10000-60000. you can find the full list of the response codes here")
    status_message: Optional[StrictStr] = Field(default=None, description="informational message of the task. you can find the full list of general informational messages here")
    time: Optional[StrictStr] = Field(default=None, description="execution time, seconds")
    cost: Optional[StrictFloat] = Field(default=None, description="total tasks cost, USD")
    result_count: Optional[StrictInt] = Field(default=None, description="number of elements in the result array")
    path: Optional[List[Optional[StrictStr]]] = Field(default=None, description="URL path")
    data: Optional[Dict[str, Optional[Any]]] = Field(default=None, description="contains the same parameters that you specified in the POST request")
    result: Optional[List[Optional[SerpGoogleAdsAdvertisersTaskGetAdvancedResultInfo]]] = Field(default=None, description="array of results")
    __properties: ClassVar[List[str]] = [
        "id", 
        "status_code", 
        "status_message", 
        "time", 
        "cost", 
        "result_count", 
        "path", 
        "data", 
        "result", 
        ]

    additional_properties: Dict[str, Any] = Field(default_factory=dict)

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        excluded_fields: Set[str] = set([
        ])

        _dict = {}

        _dict['id'] = self.id
        _dict['status_code'] = self.status_code
        _dict['status_message'] = self.status_message
        _dict['time'] = self.time
        _dict['cost'] = self.cost
        _dict['result_count'] = self.result_count
        _dict['path'] = self.path
        _dict['data'] = self.data
        result_items = []
        if self.result:
            for _item in self.result:
                if _item:
                    result_items.append(_item.to_dict())
            _dict['result'] = result_items
        return _dict


    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "status_code": obj.get("status_code"),
            "status_message": obj.get("status_message"),
            "time": obj.get("time"),
            "cost": obj.get("cost"),
            "result_count": obj.get("result_count"),
            "path": obj.get("path"),
            "data": obj.get("data"),
            "result": [SerpGoogleAdsAdvertisersTaskGetAdvancedResultInfo.from_dict(_item) for _item in obj["result"]] if obj.get("result") is not None else None,
        })

        additional_properties = {k: v for k, v in obj.items() if k not in cls.__properties}
        _obj.additional_properties = additional_properties
        return _obj