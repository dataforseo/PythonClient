# coding: utf-8

"""
    DataForSEO API documentation

    DataForSEO API is the starting point on your journey towards building powerful SEO software. With DataForSEO you can get all the data you need to build an efficient application while also saving your time and budget. DataForSEO API is using the REST technology for interchanging data between your application and our service. The data exchange is made through the widely used HTTP protocol, which allows applying our API to almost all programming languages.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictFloat, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from dataforseo_client.models.content_rating_info import ContentRatingInfo
from dataforseo_client.models.section_content_item_info import SectionContentItemInfo
from typing import Optional, Set
from typing_extensions import Self

class ContentCommentInfo(BaseModel):
    """
    ContentCommentInfo
    """ # noqa: E501
    rating: Optional[ContentRatingInfo] = None
    title: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="title of the customerâ€™s comment")
    publish_date: Optional[StrictStr] = Field(default=None, description="date when the comment was published")
    author: Optional[StrictStr] = Field(default=None, description="author of the comment")
    have_form: Optional[StrictBool] = None
    primary_content: Optional[List[SectionContentItemInfo]] = Field(default=None, description="primary content on the page you can find more information about content priority calculation in this help center article")
    __properties: ClassVar[List[str]] = ["rating", "title", "publish_date", "author", "have_form", "primary_content"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ContentCommentInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of rating
        if self.rating:
            _dict['rating'] = self.rating.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in primary_content (list)
        _items = []
        if self.primary_content:
            for _item_primary_content in self.primary_content:
                if _item_primary_content:
                    _items.append(_item_primary_content.to_dict())
            _dict['primary_content'] = _items
        # set to None if title (nullable) is None
        # and model_fields_set contains the field
        if self.title is None and "title" in self.model_fields_set:
            _dict['title'] = None

        # set to None if publish_date (nullable) is None
        # and model_fields_set contains the field
        if self.publish_date is None and "publish_date" in self.model_fields_set:
            _dict['publish_date'] = None

        # set to None if author (nullable) is None
        # and model_fields_set contains the field
        if self.author is None and "author" in self.model_fields_set:
            _dict['author'] = None

        # set to None if have_form (nullable) is None
        # and model_fields_set contains the field
        if self.have_form is None and "have_form" in self.model_fields_set:
            _dict['have_form'] = None

        # set to None if primary_content (nullable) is None
        # and model_fields_set contains the field
        if self.primary_content is None and "primary_content" in self.model_fields_set:
            _dict['primary_content'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ContentCommentInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "rating": ContentRatingInfo.from_dict(obj["rating"]) if obj.get("rating") is not None else None,
            "title": obj.get("title"),
            "publish_date": obj.get("publish_date"),
            "author": obj.get("author"),
            "have_form": obj.get("have_form"),
            "primary_content": [SectionContentItemInfo.from_dict(_item) for _item in obj["primary_content"]] if obj.get("primary_content") is not None else None
        })
        return _obj


